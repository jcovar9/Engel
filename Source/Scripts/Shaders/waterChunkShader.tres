[gd_resource type="Shader" format=3 uid="uid://b435qlbfb63ar"]

[resource]
code = "shader_type canvas_item;

uniform float[1000000] tileHeights;
uniform int[1000000] tileTypes;
uniform int viewSize;
uniform int chunkSize;

void fragment() {
	int x = int(UV.x * float(viewSize));
	int y = int(UV.y * float(viewSize));
	int worldX = x - ((viewSize - chunkSize) / 2);
	int worldY = y - ((viewSize - chunkSize) / 2);
	float currHeight = float(int(tileHeights[x + y * viewSize] * 10.0)) / 10.0;
	int currType = tileTypes[x + y * viewSize];
	if(currType == -1)
	{
		COLOR = vec4(1.0,1.0,0.0,1.0);
	}
	else if(currType == -2)
	{
		COLOR = vec4(1.0,0.0,0.0,1.0);
	}
	else if(currType == 1) // local minimum
	{
		COLOR = vec4(0.0,0.0,1.0,1.0);
	}
	else if(currType == 2) // local maximum
	{
		COLOR = vec4(0.0,0.0,1.0,1.0);
	}
	else if(currType == 3) // inbetween
	{
		COLOR = vec4(0.0,0.0,1.0,0.5);
	}
	else if(currType == 4) // edges
	{
		COLOR = vec4(0.0, currHeight, 0.0, 1.0);
	}
	else{
		if(worldX / chunkSize * chunkSize == worldX){
			COLOR = vec4(0.5, 0.0, 0.0, 0.5);
		}
		else if(worldY / chunkSize * chunkSize == worldY){
			COLOR = vec4(0.5, 0.0, 0.0, 0.5);
		}
		else{
			COLOR = vec4(0.0,0.0,0.0,0.1);
		}
	}
}"
